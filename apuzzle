#!/bin/bash

APUZZLE=$(basename $0)

nums=()
n=0 # the width/height of the grid, i.e. the difficulty of the game
m=0 # m = n*n, the length of nums
x=0 #
y=0 # (x, y), the position of the blank

# swap two numbers in nums
# @param $1, $2 the index of these two numbers
function swap( ) {
    local t i=$1 j=$2
    t=${nums[$i]}
    nums[$i]=${nums[$j]}
    nums[$j]=$t
}

# shuffle the first "$1" numbers of nums
# @param $1 see above 
# @return how many times swap happened
function shuffle( ) {
    local i j=0 n=$1
    while ((n > 1)); do
        i=$((RANDOM % n))
        n=$((n-1))
        ((i != n)) && { j=$((j+1)); swap $i $n; }
    done
    return $j
}

# generate solvable puzzle
# https://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html
function gen_puzzle( ) {
    # init nums
    nums=()
    local i
    for ((i=1; i<m; i++)); do
        nums[$((i-1))]=$i
    done
    nums[$i]=""

    # gen the position of the blank randomly
    local t=$((RANDOM % m))
    x=$((t / n))
    y=$((t % n))

    # shuffle 
    shuffle $((m-1))
    i=$?

    # swap for solvability
    ((n%2 == 1 && i%2 == 1 || n%2 == 0 && (i+x)%2 == 0)) && swap 0 $((m-2))

    # insert the blank
    for ((i=m-1; i>t; i--)); do
        nums[$i]=${nums[$((i-1))]}
    done
    nums[$t]=""
}

# print puzzle
function print_puzzle( ) {
    clear

    local i=0 w=$((2 + n/11))
    while ((i < m)); do
        printf "%*s " $w ${nums[$i]}
        i=$((i+1))
        ((i%n == 0)) && echo
    done
}

# move tile
# @param $1 the moving direction of the tile
function move_tile( ) {
    local d=$1 w=$((2 + n/11)) i=$((x*n+y))
    local xn=$((x+1)) yn=$(((w+1) * y + 1))
    case $d in
        h) ((y < n-1)) && { nums[$i]=${nums[$((i+1))]}; y=$((y+1)); } || return;;
        j) ((x > 0))   && { nums[$i]=${nums[$((i-n))]}; x=$((x-1)); } || return;;
        k) ((x < n-1)) && { nums[$i]=${nums[$((i+n))]}; x=$((x+1)); } || return;;
        l) ((y > 0))   && { nums[$i]=${nums[$((i-1))]}; y=$((y-1)); } || return;;
        *) return;;
    esac
    #
    printf "\e[$xn;${yn}H%*s " $w ${nums[$i]} 
    xn=$((x+1))
    yn=$(((w+1) * y+ 1))
    printf "\e[${xn};${yn}H%*s " $w ""
    echo -en "\e[$((n+1));1H"
}

# check if the puzzle is resolved
# @return 1 - resolved, 0 - not resolved
function check_puzzle( ) {
    local i
    for ((i=1; i<m; i++)); do
        ((nums[$((i-1))] != i)) && return 0
    done
    return 1
}

# print "Good!" in the middle
function good( ) {
    local w=$((2 + n/11))
    local a=$((n / 2 + 1)) b=$(((n*w + n - 5) / 2)) # 5, the len of "Good!"
    printf "\e[$a;1H\e[7m%*sGood!%*s\e[0m\e[$((n+1));1H" $b "" $b ""
}

function game( ) {
    gen_puzzle
    print_puzzle
    while : ; do
        read -n1 -s
        move_tile $REPLY
        check_puzzle
        (($?)) && { good; break; }
    done
}

# show help text
function help( ) {
    echo "$APUZZLE - An n-puzzle game written in bash"
    echo
    echo "Usage: $APUZZLE [-h] [-k key] [-l level]"
    echo
    echo "Available options:"
    echo "  -h       Show this help text"
    echo "  -k key   Customize the keys for 4 directions in"
    echo "           left-down-up-right order (default: hjkl)"
    echo "  -l level Specify level (0-9, default: 1)"
}

# show menu
function menu( ) {
    clear
    echo
    echo '  N-Puzzle  '
    echo
    echo ' LEVEL  0-9 '
    echo ' HELP     h '
    echo ' EXIT     e '
    echo
    read -n1 -s
    case $REPLY in
        [0-9]) n=$((REPLY + 2));;
        h) help; echo -en '\nPress any key to continue '; read -n1 -s;;
        *) exit;;
    esac
    m=$((n*n))
}

# parse cli options
# @param "$@"
function parse_opts( ) {
    local opt
    while getopts ':hk:l:' opt; do
        case $opt in
            h) help; exit;;
            k) ;; # TODO
            l) n=3; [[ $OPTARG =~ ^[0-9]$ ]] && n=$((OPTARG+2)); m=$((n*n));;
            :) echo "$APUZZLE: option '-$OPTARG' requires an argument"; exit;;
            ?) echo "$APUZZLE: invalid option '-$OPTARG'"; exit;;
        esac
    done
    if ((OPTIND <= $#)); then
        shift $((OPTIND-1))
        echo "$APUZZLE: invalid option '$1'"
        exit
    fi
}

function main( ) {
    # parse options
    parse_opts "$@"

    # show menu when the level isn't specified
    ((n == 0)) && { n=3; menu; }

    # the main loop
    while : ; do
        game
        read -n1 -s
        case $REPLY in
            m) menu;; # go to menu
            n) ;;     # next puzzle
            *) exit;; # exit
        esac
    done
}

main "$@"
